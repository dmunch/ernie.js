{[
  {"should encode array", "v = [25, 257]", [25, 257]},
  {"should encode nested array", "v = [[25, 257], [299, 300]]", [[25, 257], [299, 300]]},
  {"should encode associative array as map", "v = {'a': 25, 'b': 257}", #{<<"a">>=>25, <<"b">>=>257}},
  {"should encode tuple", "new Bert.BertTuple([25, 257])", {25, 257}},
  {"should encode strings as binary", "'asdf'", <<"asdf">>},
  {"should encode atoms", "new Bert.BertAtom('cookie')", cookie},
  {"should encode small ints", "i = 254", 254},
  {"should encode ints", "i = 123456", 123456},
  {"should encode floats", "i = 3.14159", 3.14159},
  {"should encode SMALL_BIG", "i = 123456789101112", 123456789101112}
  
  %this one gets serialized by erlang to STRING_EXT
  %we don't expect the JS encoder to encode to STRING_EXT
  %{"should support smallint arrays", [25, 250], "[25, 250]"}.
],
[  
  {"should decode array", [25, 257], "v = [25, 257]"},
  {"should decode smallint arrays", [25, 250], "v = [25, 250]"},
  {"should decode small int", 254, "i = 254"},
  {"should decode small big int", 10000000000, "i = 10000000000"},
  {"should decode int", 123456, "i = 123456"},
  {"should decode float", 3.14159, "i = 3.14159"},
  %{"should decode binary as Uint8Array", <<1, 2, 3>>, "i = new Uint8Array([1, 2, 3])"},
  %{"should decode binary as string", <<"asdf">>, "i = Uint8Array([97, 115, 100, 102])"},
  {"should decode binary as string", <<"asdf">>, "i = 'asdf'"},
  {"should decode array of binary as array of string1", [<<"reset">>], "i = ['reset']"},
  {"should decode array of binary as array of string", [<<"asdf">>, <<"asdf">>], "i = ['asdf', 'asdf']"},
  {"should decode tuple as array", {1, 2}, "i = [1, 2]"},
  {"should decode map as associative array" , #{a=>25, b=>257}, "v = {'a': 25, 'b': 257}"},
  {"should decode atom as string", cookie, "i = 'cookie'"},
  {"should decode nested terms", {cookie, [1, 2, 3], {1234, 45}}, "i = ['cookie', [1, 2, 3], [1234, 45]]"}
]}.
